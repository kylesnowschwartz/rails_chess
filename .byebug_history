quit
move e6 d6 #check 
move f4 g4
move d7 e6
move e8 d7
move d7 d5
move e3 f4
move e2 e3
move e1 e2
q
n
checked_opposing_player?
quit
opposite_color_pieces_without_king.map do |opposite_piece| [opposite_piece, "Validate#{opposite_piece.class}Move".constantize.new(opposite_piece, @duped_board, @duped_board.position(opposite_piece), position ).call] end
y opposite_color_pieces_without_king.map do |opposite_piece| [opposite_piece, "Validate#{opposite_piece.class}Move".constantize.new(opposite_piece, @duped_board, @duped_board.position(opposite_piece), position ).call] end
y opposite_color_pieces_without_king.map do |opposite_piece| [opposite_piece, "Validate#{opposite_piece.class}Move".constantize.new(opposite_piece, @duped_board, @duped_board.position(opposite_piece), position ).call] end.to_a
yopposite_color_pieces_without_king.map do |opposite_piece| [opposite_piece, "Validate#{opposite_piece.class}Move".constantize.new(opposite_piece, @duped_board, @duped_board.position(opposite_piece), position ).call] end.to_a
pp opposite_color_pieces_without_king.map do |opposite_piece| [opposite_piece, "Validate#{opposite_piece.class}Move".constantize.new(opposite_piece, @duped_board, @duped_board.position(opposite_piece), position ).call] end.to_a
pp opposite_color_pieces_without_king.map do |opposite_piece| [opposite_piece, "Validate#{opposite_piece.class}Move".constantize.new(opposite_piece, @duped_board, @duped_board.position(opposite_piece), position ).call] end
pp _
    opposite_color_pieces_without_king.map do |opposite_piece| [opposite_piece, "Validate#{opposite_piece.class}Move".constantize.new(opposite_piece, @duped_board, @duped_board.position(opposite_piece), position ).call] end
    opposite_color_pieces_without_king.map do |opposite_piece| "Validate#{opposite_piece.class}Move".constantize.new(opposite_piece, @duped_board, @duped_board.position(opposite_piece), position).call end
    opposite_color_pieces_without_king.map do |opposite_piece| "Validate#{opposite_piece.class}Move".constantize.new(opposite_piece, @duped_board, @duped_board.position(opposite_piece), position).call end.any?
    end
      ).call
        opposite_piece, @duped_board, @duped_board.position(opposite_piece), position
      "Validate#{opposite_piece.class}Move".constantize.new(
    opposite_color_pieces_without_king.map do |opposite_piece|
opposite_color_pieces_without_king
    end
      ).call
        opposite_piece, @duped_board, @duped_board.position(opposite_piece), position
      "Validate#{opposite_piece.class}Move".constantize.new(
opposite_color_pieces_without_king.map do |opposite_piece|
opposite_color_pieces_attack_desired_position?(52)
kings_meeting?
@duped_board
n
@duped_board
n
@duped_board
quit
moves_into_check?(52)
@board.piece(52).same_color?(@king)
@king.potential_moves(from)
@king.potential_moves
c
f
c
right_to_left
left_to_right
c
@bishop.potential_moves(from)
@bishop.potential_moves
right_to_left
left_to_right
quit
finish
f
if
restart
pieces
pieces.find_index(piece_in_question)
piece_in_question
pieces
c
n
display offset
n
c
display starting_position
watch starting_position
help
starting_position
c
offset
starting_position
c
n
offset
starting_position
c
q
pieces
quit
finish
continue
help
quit
board.position(behind)
b.position(behind)
behind
n
ahead
n
ahead
n
ahead
starting_position
pieces
behind_subset
ahead_subset
quit
n
display diagonal
n
display col_index
n
display all_diags
help
n
all_diags
n
all_diags
n
all_diags
quit
y
quit
all_diags
matrix
n
matrix
quit
n
quit
up
help
color
