quit
@duped_board
@board
piece_in_question == same_color_king
same_color_king
piece_in_question_pinned?
piece_in_question
piece_in_question?
my_color_king_in_check?
n
quit
@duped_board
my_color_king_in_check?
opposite_color_king_in_check?
kings_position
opposite_color_pieces_legal_moves
opposite_color_pieces.legal_moves
opposite_color_pieces
@board
piece_in_question_pinned?
my_color_king_in_check?
!my_color_king_in_check?
original_king_position == from
to == queen_side_position
n
to
continue
help
end
n
to
n
to
n
to
n
queen_side_position
n
to
queen_side_position
to == queen_side_position
n
quit
@board.position(left_bound_piece)
@board.position(left_bound_piece_
position
!my_color_king_in_check?
original_rook_positions[0] == @board.position(left_bound_piece)
original_rook_positions[0]
left_bound_piece.is_a?(Rook)
original_king_position == from
to == queen_side_position
to
right_bound_piece
right_bound
left_bound_piece
left_bound_pieces
subset_of_pieces_that_bound_king
pieces
rank
queen_side_position
n
quit
enclosed_inclusive_subset(pieces_on_rank_or_file(rank)).sort
pieces_on_rank_or_file(rank).count
enclosed_inclusive_subset(pieces_on_rank_or_file(rank)).count
enclosed_inclusive_subset(pieces_on_rank_or_file(rank))
pieces_on_rank_or_file(rank)
rank
piece_in_question
pieces
n
rank
n
from
king_side_position
n
queen_side_position
n
queen_side_position
quit
